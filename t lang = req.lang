[1mdiff --git a/bun.lockb b/bun.lockb[m
[1mnew file mode 100755[m
[1mindex 0000000..4668a29[m
Binary files /dev/null and b/bun.lockb differ
[1mdiff --git a/src/course/course.controller.ts b/src/course/course.controller.ts[m
[1mindex 2d31e47..4eb701c 100644[m
[1m--- a/src/course/course.controller.ts[m
[1m+++ b/src/course/course.controller.ts[m
[36m@@ -53,9 +53,13 @@[m [mexport class CourseController {[m
     const lang = req.lang||'en';[m
 [m
     if (!Types.ObjectId.isValid(idCourse)) {[m
[31m-      throw new BadRequestException([m
[31m-        lang === 'ar' ? 'معرف الدورة غير صالح' : 'Invalid course ID format',[m
[31m-      );[m
[32m+[m[32m      throw new BadRequestException({[m
[32m+[m[32m        message:[m
[32m+[m[32m          lang === 'ar'[m
[32m+[m[32m            ? 'يوجد أخطاء'[m
[32m+[m[32m            : 'There errors',[m
[32m+[m[32m        errors: lang === 'ar' ? 'معرف الدورة غير صالح' : 'Invalid course ID format',[m
[32m+[m[32m      });[m
     }[m
 [m
     return this.courseService.AddLectureToCourse(new Types.ObjectId(idCourse), lectureDto,lang);[m
[36m@@ -84,9 +88,13 @@[m [mexport class CourseController {[m
     const lang = req.lang||'en';[m
 [m
     if (!Types.ObjectId.isValid(id)) {[m
[31m-      throw new BadRequestException([m
[31m-        lang === 'ar' ? 'معرف الدورة غير صالح' : 'Invalid course ID format',[m
[31m-      );[m
[32m+[m[32m      throw new BadRequestException({[m
[32m+[m[32m        message:[m
[32m+[m[32m          lang === 'ar'[m
[32m+[m[32m            ? 'يوجد أخطاء'[m
[32m+[m[32m            : 'There errors',[m
[32m+[m[32m        errors: lang === 'ar' ? 'معرف الدورة غير صالح' : 'Invalid course ID format',[m
[32m+[m[32m      });[m
     }[m
 [m
     return this.courseService.updateCourseByID(new Types.ObjectId(id), updateCourseDto, user.id,lang);[m
[36m@@ -135,9 +143,13 @@[m [mexport class CourseController {[m
     const lang = req.lang||'en';[m
 [m
     if (!Types.ObjectId.isValid(id)) {[m
[31m-      throw new BadRequestException([m
[31m-        lang === 'ar' ? 'معرف الدورة غير صالح' : 'Invalid course ID format',[m
[31m-      );[m
[32m+[m[32m      throw new BadRequestException({[m
[32m+[m[32m        message:[m
[32m+[m[32m          lang === 'ar'[m
[32m+[m[32m            ? 'يوجد أخطاء'[m
[32m+[m[32m            : 'There errors',[m
[32m+[m[32m        errors: lang === 'ar' ? 'معرف الدورة غير صالح' : 'Invalid course ID format',[m
[32m+[m[32m      });[m
     }[m
 [m
     return this.courseService.getCourseDetailsByID(new Types.ObjectId(id),lang);[m
[36m@@ -155,9 +167,13 @@[m [mexport class CourseController {[m
   const lang = req.lang||'en';[m
 [m
     if (!Types.ObjectId.isValid(id)) {[m
[31m-      throw new BadRequestException([m
[31m-        lang === 'ar' ? 'معرف الدورة غير صالح' : 'Invalid course ID format',[m
[31m-      );[m
[32m+[m[32m      throw new BadRequestException({[m
[32m+[m[32m        message:[m
[32m+[m[32m          lang === 'ar'[m
[32m+[m[32m            ? 'يوجد أخطاء'[m
[32m+[m[32m            : 'There errors',[m
[32m+[m[32m        errors: lang === 'ar' ? 'معرف الدورة غير صالح' : 'Invalid course ID format',[m
[32m+[m[32m      });[m
     }[m
 [m
     return this.courseService.deleteCourse(new Types.ObjectId(id),lang);[m
[1mdiff --git a/src/mail/mail.service.ts b/src/mail/mail.service.ts[m
[1mindex 95ef4eb..74ec82c 100644[m
[1m--- a/src/mail/mail.service.ts[m
[1m+++ b/src/mail/mail.service.ts[m
[36m@@ -46,35 +46,25 @@[m [mexport class MailService {[m
     await this.sendEmail(toEmail, subject, text, html, lang);[m
   }[m
   [m
[31m-    public async sendResetCodeEmail(email: string, code: string, lang: 'en' | 'ar' = 'en'): Promise<void> {[m
[31m-    try {[m
[31m-      const today = new Date().toLocaleDateString('ar-en');[m
[31m-[m
[31m-      await this.mailerService.sendMail({[m
[31m-    to: email,[m
[31m-    from: `No Reply <${this.configService.get('MAIL_USER')}>`,[m
[31m-    subject: lang === 'ar'[m
[31m-      ? 'رمز إعادة تعيين كلمة المرور'[m
[31m-      : 'Password Reset Code',[m
[31m-    template: 'reset-code',[m
[31m-    context: {[m
[31m-      email,[m
[31m-      code,[m
[31m-      today,[m
[31m-      lang,[m
[31m-      message:[m
[31m-        lang === 'ar'[m
[31m-          ?` رمز إعادة تعيين كلمة المرور الخاص بك هو: ${code}.\nهذا الرمز صالح لمدة دقيقة واحدة فقط.`[m
[31m-          : `Your password reset code is: ${code}.\nThis code is valid for only one minute.`,[m
[31m-    },[m
[31m-  });[m
[31m-    } catch (err) {[m
[31m-      console.error(' Failed to send reset code email:', err);[m
[31m-      throw new RequestTimeoutException([m
[31m-        lang === 'ar' ? 'حدث خطأ، حاول مرة أخرى لاحقًا' : 'Something went wrong, please try again later'[m
[31m-      );[m
[31m-    }[m
[32m+[m[32mpublic async sendLoginEmail(email: string, lang: 'en' | 'ar' = 'en'): Promise<void> {[m
[32m+[m[32m  try {[m
[32m+[m[32m    const today = new Date();[m
[32m+[m[32m    await this.mailerService.sendMail({[m
[32m+[m[32m      to: email,[m
[32m+[m[32m      from: `"No Reply" <${this.configService.get('MAIL_USER')}>`,[m
[32m+[m[32m      subject: lang === 'ar' ? 'تسجيل الدخول إلى حسابك' : 'Login to your account',[m
[32m+[m[32m      template: 'login',[m[41m [m
[32m+[m[32m      context: {[m
[32m+[m[32m        email,[m
[32m+[m[32m        today,[m
[32m+[m[32m        lang,[m
[32m+[m[32m      },[m
[32m+[m[32m    });[m
[32m+[m[32m  } catch (err) {[m
[32m+[m[32m    console.error(' Failed to send login email:', err);[m
[32m+[m[32m    throw new RequestTimeoutException('Something went wrong, please try again later');[m
   }[m
[32m+[m[32m}[m
 [m
   private async sendEmail(toEmail: string, subject: string, text: string, html: string, lang: 'ar' | 'en') {[m
      try {[m
[1mdiff --git a/src/mail/templates/reset-code.ejs b/src/mail/templates/reset-code.ejs[m
[1mdeleted file mode 100644[m
[1mindex 6d91218..0000000[m
[1m--- a/src/mail/templates/reset-code.ejs[m
[1m+++ /dev/null[m
[36m@@ -1,102 +0,0 @@[m
[31m-<!DOCTYPE html>[m
[31m-<html lang="<%= lang %>">[m
[31m-<head>[m
[31m-  <meta charset="UTF-8">[m
[31m-  <title>رمز إعادة تعيين كلمة المرور</title>[m
[31m-  <style>[m
[31m-    body {[m
[31m-      background-color: #f4f4f7;[m
[31m-      font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;[m
[31m-      margin: 0;[m
[31m-      padding: 0;[m
[31m-    }[m
[31m-[m
[31m-    .container {[m
[31m-      max-width: 600px;[m
[31m-      margin: 40px auto;[m
[31m-      background-color: #ffffff;[m
[31m-      border-radius: 8px;[m
[31m-      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);[m
[31m-      overflow: hidden;[m
[31m-    }[m
[31m-[m
[31m-    .header {[m
[31m-      background-color: #4a90e2;[m
[31m-      color: #ffffff;[m
[31m-      text-align: center;[m
[31m-      padding: 30px 20px;[m
[31m-    }[m
[31m-[m
[31m-    .header h1 {[m
[31m-      margin: 0;[m
[31m-      font-size: 24px;[m
[31m-      font-weight: normal;[m
[31m-    }[m
[31m-[m
[31m-    .content {[m
[31m-      padding: 30px 20px;[m
[31m-      color: #333333;[m
[31m-    }[m
[31m-[m
[31m-    .content p {[m
[31m-      font-size: 16px;[m
[31m-      line-height: 1.6;[m
[31m-    }[m
[31m-[m
[31m-    .code-box {[m
[31m-      margin: 30px 0;[m
[31m-      text-align: center;[m
[31m-    }[m
[31m-[m
[31m-    .code {[m
[31m-      display: inline-block;[m
[31m-      font-size: 32px;[m
[31m-      font-weight: bold;[m
[31m-      color: #4a90e2;[m
[31m-      letter-spacing: 6px;[m
[31m-      background-color: #f0f4fa;[m
[31m-      padding: 15px 25px;[m
[31m-      border-radius: 6px;[m
[31m-      border: 1px dashed #4a90e2;[m
[31m-    }[m
[31m-[m
[31m-    .footer {[m
[31m-      text-align: center;[m
[31m-      font-size: 12px;[m
[31m-      color: #999999;[m
[31m-      padding: 20px;[m
[31m-      border-top: 1px solid #eeeeee;[m
[31m-    }[m
[31m-  </style>[m
[31m-</head>[m
[31m-<body>[m
[31m-  <div class="container">[m
[31m-    <div class="header">[m
[31m-      <h1><%= lang === 'ar' ? 'رمز إعادة تعيين كلمة المرور' : 'Password Reset Code' %></h1>[m
[31m-    </div>[m
[31m-    <div class="content">[m
[31m-      <p>[m
[31m-        <%= lang === 'ar'[m
[31m-          ? 'مرحباً، لقد طلبت إعادة تعيين كلمة المرور الخاصة بك.'[m
[31m-          : 'Hello, you requested to reset your password.' %>[m
[31m-      </p>[m
[31m-      <p>[m
[31m-        <%= lang === 'ar'[m
[31m-          ? 'استخدم الرمز التالي لإتمام العملية. هذا الرمز صالح لمدة دقيقتان فقط:'[m
[31m-          : 'Use the following code to complete the process. This code is valid for two minute only:' %>[m
[31m-      </p>[m
[31m-      <div class="code-box">[m
[31m-        <span class="code"><%= code %></span>[m
[31m-      </div>[m
[31m-      <p>[m
[31m-        <%= lang === 'ar'[m
[31m-          ? 'إذا لم تطلب ذلك، يمكنك تجاهل هذا البريد الإلكتروني.'[m
[31m-          : 'If you did not request this, you can safely ignore this email.' %>[m
[31m-      </p>[m
[31m-    </div>[m
[31m-    <div class="footer">[m
[31m-      <p><%= email %> - <%= today %></p>[m
[31m-    </div>[m
[31m-  </div>[m
[31m-</body>[m
[31m-</html>[m
\ No newline at end of file[m
[1mdiff --git a/src/main.ts b/src/main.ts[m
[1mindex 33f560c..954f904 100644[m
[1m--- a/src/main.ts[m
[1m+++ b/src/main.ts[m
[36m@@ -13,7 +13,7 @@[m [masync function bootstrap() {[m
   const app = await NestFactory.create(AppModule);[m
   const configService = app.get(ConfigService);[m
   dotenv.config();[m
[31m-  // this one for intercepor[m
[32m+[m[32m  // this one for interceptr[m
   app.useGlobalInterceptors(new LanguageInterceptor());[m
   //==========================[m
   app.useGlobalPipes(new ValidationPipe({[m
[36m@@ -25,24 +25,21 @@[m [masync function bootstrap() {[m
   app.use(cookieParser());[m
    //===============================[m
   app.enableCors({[m
[31m-    origin: 'http://localhost:5173', [m
[31m-    methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'], [m
[31m-    credentials: true, [m
[31m-  allowedHeaders: [[m
[31m-      'content-Type',[m
[31m-      'authorization',[m
[31m-      'lang',[m
[31m-      'language',[m
[31m-      'accept',[m
[31m-    ],[m
[31m-     exposedHeaders: [[m
[31m-      'authorization',[m
[31m-      'lang',[m
[31m-    ],[m
[32m+[m[32m    origin: 'http://localhost:5173', // Allow specific domain[m
[32m+[m[32m    methods: 'GET,POST,PATCH,PUT,DELETE', // Allow HTTP methods[m
[32m+[m[32m    credentials: true, // Allow cookies to be sent[m
[32m+[m[32m    allowedHeaders: 'Content-Type, Authorization', // Permitted request headers[m
   });[m
    //===============================[m
   app.use(helmet());[m
    //===============================[m
[32m+[m[32m  app.useGlobalPipes([m
[32m+[m[32m    new ValidationPipe({[m
[32m+[m[32m      whitelist:true,[m
[32m+[m[32m      forbidNonWhitelisted:true,[m
[32m+[m[32m    }),[m
[32m+[m[32m  );[m
[32m+[m[32m  //===============================[m
   const upload=multer();[m
    app.use((req, res, next) => {[m
     if (req.is('multipart/form-data')) {[m
[1mdiff --git a/src/user/auth/auth.provider.ts b/src/user/auth/auth.provider.ts[m
[1mindex 97af8f5..20224d0 100644[m
[1m--- a/src/user/auth/auth.provider.ts[m
[1m+++ b/src/user/auth/auth.provider.ts[m
[36m@@ -1,8 +1,14 @@[m
[31m-import { BadRequestException, Injectable, UnauthorizedException } from '@nestjs/common';[m
[32m+[m[32mimport {[m
[32m+[m[32m  BadRequestException,[m
[32m+[m[32m  forwardRef,[m
[32m+[m[32m  Inject,[m
[32m+[m[32m  Injectable,[m
[32m+[m[32m  UnauthorizedException,[m
[32m+[m[32m} from '@nestjs/common';[m
 import * as bcrypt from 'bcryptjs';[m
 import { JwtService } from '@nestjs/jwt';[m
 import { randomBytes } from 'node:crypto';[m
[31m-import {JWTPayloadType} from '../../../utilitis/types';[m
[32m+[m[32mimport { JWTPayloadType } from '../../../utilitis/types';[m
 import { ConfigService } from '@nestjs/config';[m
 import { InjectModel } from '@nestjs/mongoose';[m
 import { Model, Types } from 'mongoose';[m
[36m@@ -11,274 +17,414 @@[m [mimport { MailService } from 'src/mail/mail.service';[m
 import { RegisterUserDto } from '../dto/register-user.dto';[m
 import { LoginDto } from './../dto/login.dto';[m
 import { ResetPasswordDto } from './../dto/reset-password.dto';[m
[31m-import { Response,Request } from 'express';[m
[31m-[m
[32m+[m[32mimport { Response, Request } from 'express';[m
[32m+[m[32mimport { UserService } from '../user.service';[m
 [m
 @Injectable()[m
 export class AuthProvider {[m
[32m+[m[32m  constructor([m
[32m+[m[32m    @InjectModel(User.name) private readonly userModul: Model<User>,[m
[32m+[m[32m    private readonly jwtService: JwtService,[m
[32m+[m[32m    private readonly configService: ConfigService,[m
[32m+[m[32m    private readonly mailService: MailService,[m
[32m+[m[32m    @Inject(forwardRef(() => UserService))[m
[32m+[m[32m    private readonly userService: UserService,[m
[32m+[m[32m  ) {}[m
[32m+[m
[32m+[m[32m  public async Register([m
[32m+[m[32m    registerUserDto: RegisterUserDto,[m
[32m+[m[32m    req: Request,[m
[32m+[m[32m    userData: JWTPayloadType,[m
[32m+[m[32m  ) {[m
[32m+[m[32m    const lang =[m
[32m+[m[32m      req.headers['lang'] === 'ar' || req.headers['language'] === 'ar'[m
[32m+[m[32m        ? 'ar'[m
[32m+[m[32m        : 'en';[m
[32m+[m[32m    const { userEmail, password, userName } = registerUserDto;[m
[32m+[m[32m    const errors = [];[m
[32m+[m[32m    // التحقق من صحة البريد الإلكتروني[m
[32m+[m[32m    const isEmailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(userEmail);[m
[32m+[m[32m    if (!isEmailValid) {[m
[32m+[m[32m      errors.push({[m
[32m+[m[32m        field: 'userEmail',[m
[32m+[m[32m        message:[m
[32m+[m[32m          lang === 'ar'[m
[32m+[m[32m            ? 'البريد الإلكتروني غير صالح'[m
[32m+[m[32m            : 'User email is not a valid email address',[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
 [m
[31m-    constructor([m
[31m-        @InjectModel(User.name) private readonly userModul:Model<User>,[m
[31m-        private readonly jwtService:JwtService,[m
[31m-        private readonly configService:ConfigService,[m
[31m-        private readonly mailService:MailService[m
[31m-    ){}[m
[31m-[m
[31m-[m
[31m-    public async Register(registerUserDto: RegisterUserDto, lang: 'en' | 'ar' = 'en') {[m
[31m-        lang=['en','ar'].includes(lang)?lang:'en'; [m
[31m-        const { userEmail, password, userName } = registerUserDto;[m
[31m-        const errors = [];[m
[31m-        // التحقق من صحة البريد الإلكتروني[m
[31m-        const isEmailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(userEmail);[m
[31m-        if (!isEmailValid) {[m
[31m-        errors.push({[m
[31m-      field: 'userEmail',[m
[31m-      message: lang === 'ar'[m
[31m-        ? 'البريد الإلكتروني غير صالح'[m
[31m-        : 'User email is not a valid email address',[m
[31m-    });[m
[31m-  }[m
[32m+[m[32m    // التحقق من قوة كلمة المرور[m
[32m+[m[32m    if (typeof password !== 'string' || password.length < 6) {[m
[32m+[m[32m      errors.push({[m
[32m+[m[32m        field: 'password',[m
[32m+[m[32m        message:[m
[32m+[m[32m          lang === 'ar'[m
[32m+[m[32m            ? 'كلمة المرور يجب أن تكون 6 أحرف على الأقل'[m
[32m+[m[32m            : 'Password must be at least 6 characters long',[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
 [m
[31m-  // التحقق من قوة كلمة المرور[m
[31m-  if (typeof password !== 'string' || password.length < 6) {[m
[31m-    errors.push({[m
[31m-      field: 'password',[m
[31m-      message: lang === 'ar'[m
[31m-        ? 'كلمة المرور يجب أن تكون 6 أحرف على الأقل'[m
[31m-        : 'Password must be at least 6 characters long',[m
[31m-    });[m
[31m-  }[m
[32m+[m[32m    // التحقق من تكرار البريد الإلكتروني[m
[32m+[m[32m    const existingByEmail = await this.userModul.findOne({ userEmail });[m
[32m+[m[32m    if (existingByEmail) {[m
[32m+[m[32m      errors.push({[m
[32m+[m[32m        field: 'userEmail',[m
[32m+[m[32m        message:[m
[32m+[m[32m          lang === 'ar'[m
[32m+[m[32m            ? 'البريد الإلكتروني مستخدم بالفعل'[m
[32m+[m[32m            : 'User email already exists',[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
 [m
[31m-  // التحقق من تكرار البريد الإلكتروني[m
[31m-  const existingByEmail = await this.userModul.findOne({ userEmail });[m
[31m-  if (existingByEmail) {[m
[31m-    errors.push({[m
[31m-      field: 'userEmail',[m
[31m-      message: lang === 'ar'[m
[31m-        ? 'البريد الإلكتروني مستخدم بالفعل'[m
[31m-        : 'User email already exists',[m
[31m-    });[m
[31m-  }[m
[32m+[m[32m    // التحقق من تكرار اسم المستخدم[m
[32m+[m[32m    const existingByUsername = await this.userModul.findOne({ userName });[m
[32m+[m[32m    if (existingByUsername) {[m
[32m+[m[32m      errors.push({[m
[32m+[m[32m        field: 'userName',[m
[32m+[m[32m        message:[m
[32m+[m[32m          lang === 'ar'[m
[32m+[m[32m            ? 'اسم المستخدم مستخدم بالفعل'[m
[32m+[m[32m            : 'User name already exists',[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
 [m
[31m-  // التحقق من تكرار اسم المستخدم[m
[31m-  const existingByUsername = await this.userModul.findOne({ userName });[m
[31m-  if (existingByUsername) {[m
[31m-    errors.push({[m
[31m-      field: 'userName',[m
[31m-      message: lang === 'ar'[m
[31m-        ? 'اسم المستخدم مستخدم بالفعل'[m
[31m-        : 'User name already exists',[m
[31m-    });[m
[31m-  }[m
[32m+[m[32m    // إذا في أخطاء، رجعها[m
[32m+[m[32m    if (errors.length > 0) {[m
[32m+[m[32m      throw new BadRequestException({[m
[32m+[m[32m        message:[m
[32m+[m[32m          lang === 'ar'[m
[32m+[m[32m            ? 'يوجد أخطاء في البيانات المُدخلة'[m
[32m+[m[32m            : 'There are validation errors',[m
[32m+[m[32m        errors,[m
[32m+[m[32m      });[m
[32m+[m[32m    }[m
 [m
[31m-  // إذا في أخطاء، رجعها[m
[31m-  if (errors.length > 0) {[m
[31m-    throw new BadRequestException({[m
[31m-      message: lang === 'ar' ? 'يوجد أخطاء في البيانات المُدخلة' : 'There are validation errors',[m
[31m-      errors,[m
[32m+[m[32m    // إذا كل شي تمام، أنشئ المستخدم[m
[32m+[m[32m    const hashedPassword = await this.hashPasswword(password);[m
[32m+[m[32m    let newUser = new this.userModul({[m
[32m+[m[32m      ...registerUserDto,[m
[32m+[m[32m      password: hashedPassword,[m
[32m+[m[32m      verificationToken: await randomBytes(32).toString('hex'),[m
     });[m
[31m-  }[m
[31m-[m
[31m-  // إذا كل شي تمام، أنشئ المستخدم[m
[31m-  const hashedPassword = await this.hashPasswword(password);[m
[31m-  let newUser 